version: 2.1

jobs:
  test-core:
    docker:
      - image: cimg/node:22.18.0-browsers   # has Chrome & drivers preinstalled
    resource_class: large                    # a bit more CPU/RAM than medium+
    parallelism: 1
    environment:
      CI: 'true'
      TZ: Europe/Madrid
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8

      # Node memory headroom
      NODE_OPTIONS: '--max-old-space-size=4096'
      TOOL_NODE_FLAGS: '--max-old-space-size=4096'
      SERVER_NODE_OPTIONS: '--max-old-space-size=4096'

      # Puppeteer hardening
      PUPPETEER_PROTOCOL_TIMEOUT: '600000'         # 10m CDP timeout
      PUPPETEER_EXECUTABLE_PATH: '/usr/bin/google-chrome' # path in cimg/browsers
      PUPPETEER_CI: '1'                             # if your launcher reads this to add CI flags
      PUPPETEER_CACHE_DIR: '/home/circleci/.cache/puppeteer'

      # (Keep if you rely on it) separate Chromium download dir
      PUPPETEER_DOWNLOAD_PATH: /home/circleci/.npm/chromium

    steps:
      - checkout

      - run:
          name: Detect (or install) Chrome and export path
          command: |
            set -eux
            DETECTED="$(command -v google-chrome || true)"
            [ -z "$DETECTED" ] && DETECTED="$(command -v google-chrome-stable || true)"
            [ -z "$DETECTED" ] && DETECTED="$(command -v chromium || true)"
            [ -z "$DETECTED" ] && DETECTED="$(command -v chromium-browser || true)"
            if [ -z "$DETECTED" ]; then
              echo "Chrome not found. Installing Google Chrome Stableâ€¦"
              wget -qO- https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-linux.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
              sudo apt-get update
              sudo apt-get install -y google-chrome-stable
              DETECTED="/usr/bin/google-chrome"
            fi
            echo "Using Chrome at: $DETECTED"
            echo "export PUPPETEER_EXECUTABLE_PATH=$DETECTED" >> "$BASH_ENV"

      - run:
          name: System info (Chrome/Node)
          command: |
            node -v
            which google-chrome || true
            google-chrome --version || true
            free -m || true
            df -h || true

      - run:
          name: Update and install extra system deps
          command: |
            sudo apt-get update
            sudo apt-get install -y \
              libnss3 g++-12 make python3 \
              fonts-noto-color-emoji fonts-noto-cjk fonts-liberation

      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

      # Cache node modules, Meteor bits, and Puppeteer cache
      - restore_cache:
          keys:
            - v2-{{ arch }}-node22-meteor-{{ checksum "package-lock.json" }}-{{ checksum "meteor-core/meteor" }}
            - v2-{{ arch }}-node22-meteor-
            - v2-

      - run:
          name: Install dependencies (clean, deterministic)
          command: npm install

      - save_cache:
          key: v2-{{ arch }}-node22-meteor-{{ checksum "package-lock.json" }}-{{ checksum "meteor-core/meteor" }}
          paths:
            - ~/.npm
            - ~/.meteor
            - meteor-core/.meteor
            - meteor-core/.babel-cache
            - meteor-core/dev_bundle
            - /home/circleci/.npm/chromium
            - /home/circleci/.cache/puppeteer

      - run:
          name: Run Core Tests (serial; long no-output timeout)
          command: npm run test:core
          no_output_timeout: 60m

      # Capture evidence on failures to debug stalls/timeouts
      - store_artifacts:
          path: artifacts
          when: on_fail
      - store_artifacts:
          path: screenshots
          when: on_fail
      - store_artifacts:
          path: logs
          when: on_fail
      - store_artifacts:
          path: test-results
          when: on_fail

workflows:
  version: 2
  test:
    jobs:
      - test-core
